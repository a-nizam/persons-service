// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: person.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Persons_AddPerson_FullMethodName    = "/persons.Persons/AddPerson"
	Persons_GetPerson_FullMethodName    = "/persons.Persons/GetPerson"
	Persons_EditPerson_FullMethodName   = "/persons.Persons/EditPerson"
	Persons_RemovePerson_FullMethodName = "/persons.Persons/RemovePerson"
	Persons_GetList_FullMethodName      = "/persons.Persons/GetList"
)

// PersonsClient is the client API for Persons service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonsClient interface {
	AddPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*PersonID, error)
	GetPerson(ctx context.Context, in *PersonID, opts ...grpc.CallOption) (*Person, error)
	EditPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Empty, error)
	RemovePerson(ctx context.Context, in *PersonID, opts ...grpc.CallOption) (*Empty, error)
	GetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Person], error)
}

type personsClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonsClient(cc grpc.ClientConnInterface) PersonsClient {
	return &personsClient{cc}
}

func (c *personsClient) AddPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*PersonID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonID)
	err := c.cc.Invoke(ctx, Persons_AddPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) GetPerson(ctx context.Context, in *PersonID, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, Persons_GetPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) EditPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Persons_EditPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) RemovePerson(ctx context.Context, in *PersonID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Persons_RemovePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personsClient) GetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Person], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Persons_ServiceDesc.Streams[0], Persons_GetList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Person]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Persons_GetListClient = grpc.ServerStreamingClient[Person]

// PersonsServer is the server API for Persons service.
// All implementations must embed UnimplementedPersonsServer
// for forward compatibility.
type PersonsServer interface {
	AddPerson(context.Context, *Person) (*PersonID, error)
	GetPerson(context.Context, *PersonID) (*Person, error)
	EditPerson(context.Context, *Person) (*Empty, error)
	RemovePerson(context.Context, *PersonID) (*Empty, error)
	GetList(*Empty, grpc.ServerStreamingServer[Person]) error
	mustEmbedUnimplementedPersonsServer()
}

// UnimplementedPersonsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonsServer struct{}

func (UnimplementedPersonsServer) AddPerson(context.Context, *Person) (*PersonID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (UnimplementedPersonsServer) GetPerson(context.Context, *PersonID) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonsServer) EditPerson(context.Context, *Person) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPerson not implemented")
}
func (UnimplementedPersonsServer) RemovePerson(context.Context, *PersonID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePerson not implemented")
}
func (UnimplementedPersonsServer) GetList(*Empty, grpc.ServerStreamingServer[Person]) error {
	return status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPersonsServer) mustEmbedUnimplementedPersonsServer() {}
func (UnimplementedPersonsServer) testEmbeddedByValue()                 {}

// UnsafePersonsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonsServer will
// result in compilation errors.
type UnsafePersonsServer interface {
	mustEmbedUnimplementedPersonsServer()
}

func RegisterPersonsServer(s grpc.ServiceRegistrar, srv PersonsServer) {
	// If the following call pancis, it indicates UnimplementedPersonsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Persons_ServiceDesc, srv)
}

func _Persons_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Persons_AddPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).AddPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Persons_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).GetPerson(ctx, req.(*PersonID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_EditPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).EditPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Persons_EditPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).EditPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_RemovePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonsServer).RemovePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Persons_RemovePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonsServer).RemovePerson(ctx, req.(*PersonID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Persons_GetList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonsServer).GetList(m, &grpc.GenericServerStream[Empty, Person]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Persons_GetListServer = grpc.ServerStreamingServer[Person]

// Persons_ServiceDesc is the grpc.ServiceDesc for Persons service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Persons_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "persons.Persons",
	HandlerType: (*PersonsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPerson",
			Handler:    _Persons_AddPerson_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _Persons_GetPerson_Handler,
		},
		{
			MethodName: "EditPerson",
			Handler:    _Persons_EditPerson_Handler,
		},
		{
			MethodName: "RemovePerson",
			Handler:    _Persons_RemovePerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetList",
			Handler:       _Persons_GetList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "person.proto",
}
